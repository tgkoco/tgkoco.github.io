<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>有内涵 on TG zl</title>
    <link>https://tgkoco.github.io/categories/%E6%9C%89%E5%86%85%E6%B6%B5/</link>
    <description>Recent content in 有内涵 on TG zl</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 19 Sep 2019 18:44:03 +0800</lastBuildDate>
    
	<atom:link href="https://tgkoco.github.io/categories/%E6%9C%89%E5%86%85%E6%B6%B5/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>RESTfulAPI</title>
      <link>https://tgkoco.github.io/2019/nhrestfulapi/</link>
      <pubDate>Thu, 19 Sep 2019 18:44:03 +0800</pubDate>
      
      <guid>https://tgkoco.github.io/2019/nhrestfulapi/</guid>
      <description>&lt;h3 id=&#34;restful-api的设计实例&#34;&gt;RESTful API的设计实例&lt;/h3&gt;</description>
    </item>
    
    <item>
      <title>JSON Web Token的作用和解释</title>
      <link>https://tgkoco.github.io/2019/nhjwtjson-web-token%E7%9A%84%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sat, 07 Sep 2019 01:55:38 +0800</pubDate>
      
      <guid>https://tgkoco.github.io/2019/nhjwtjson-web-token%E7%9A%84%E5%8E%9F%E7%90%86/</guid>
      <description>JSON Web Token（缩写 JWT）是目前最流行的跨域认证解决方案，本文介绍它的原理和用法。 一、跨域认证的问题 互联网服务离不开用户认证。一般流程是下面这样。
1、用户向服务器发送用户名和密码。 2、服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等。 3、服务器向用户返回一个 session_id，写入用户的 Cookie。 4、用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。 5、服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。 这种模式的问题在于，扩展性（scaling）不好。单机当然没有问题，如果是服务器集群，或者是跨域的服务导向架构，就要求 session 数据共享，每台服务器都能够读取 session。
举例来说，A 网站和 B 网站是同一家公司的关联服务。现在要求，用户只要在其中一个网站登录，再访问另一个网站就会自动登录，请问怎么实现？
一种解决方案是 session 数据持久化，写入数据库或别的持久层。各种服务收到请求后，都向持久层请求数据。这种方案的优点是架构清晰，缺点是工程量比较大。另外，持久层万一挂了，就会单点失败。
另一种方案是服务器索性不保存 session 数据了，所有数据都保存在客户端，每次请求都发回服务器。JWT 就是这种方案的一个代表。
二、JWT 的原理 JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户，就像下面这样。
{ &amp;#34;姓名&amp;#34;: &amp;#34;张三&amp;#34;, &amp;#34;角色&amp;#34;: &amp;#34;管理员&amp;#34;, &amp;#34;到期时间&amp;#34;: &amp;#34;2018年7月1日0点0分&amp;#34; } 以后，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名（详见后文）。
服务器就不保存任何 session 数据了，也就是说，服务器变成无状态了，从而比较容易实现扩展。
三、JWT 的数据结构 实际的 JWT 大概就像下面这样。
它是一个很长的字符串，中间用点（.）分隔成三个部分。注意，JWT 内部是没有换行的，这里只是为了便于展示，将它写成了几行。
一个JWT实际上就是一个字符串，它由三部分组成，头部、载荷与签名。
JWT 的三个部分依次如下。
Header（头部） Payload（负载） Signature（签名） 写成一行，就是下面的样子。
Header.Payload.Signature 下面依次介绍这三个部分。
3.1 Header Header 部分是一个 JSON 对象，描述 JWT 的元数据，通常是下面的样子。</description>
    </item>
    
    <item>
      <title>位操作</title>
      <link>https://tgkoco.github.io/2019/nh%E4%BD%8D%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Sat, 07 Sep 2019 01:50:38 +0800</pubDate>
      
      <guid>https://tgkoco.github.io/2019/nh%E4%BD%8D%E6%93%8D%E4%BD%9C/</guid>
      <description>异或操作 百度解释 异或，英文为exclusive OR，缩写成xor 异或（xor）是一个数学运算符。它应用于逻辑运算。异或的数学符号为“⊕”，计算机符号为“xor”。其运算法则为： a⊕b = (¬a ∧ b) ∨ (a ∧¬b) 如果a、b两个值不相同，则异或结果为1。如果a、b两个值相同，异或结果为0。 异或也叫半加运算，其运算法则相当于不带进位的二进制加法：二进制下用1表示真，0表示假，则异或的运算法则为：0⊕0=0，1⊕0=1，0⊕1=1，1⊕1=0（同为0，异为1），这些法则与加法是相同的，只是不带进位，所以异或常被认作不进位加法。 异或略称为XOR、EOR、EX-OR 程序中有三种演算子：XOR、xor、⊕。 使用方法如下 z = x ⊕ y z = x xor y True ⊕ False = True False ⊕ True = True False⊕ False = False True ⊕ True = False 11111111^00000000=11111111
00000000^00000000=00000000
0101^0011=0110
func swap(a ,b int){ //a和b记性交换 a=a^b; b=b^a; a=a^b; } 取反（NOT）相反 (0&amp;ndash;&amp;gt;1 1&amp;ndash;&amp;gt;0) 取反是一元运算符， 对一个二进制数的每一位执行逻辑反操作。使数字1成为0， 0成为1。例如： NOT 0111（十进制 7） = 1000 （十进制 8） 许多程序设计语言（包括C程序设计语言family）， 取反操作符用波浪线&amp;#34;~&amp;#34;表示。值得注意的是此操作符与&amp;#34;逻辑非（!</description>
    </item>
    
    <item>
      <title>base64编码</title>
      <link>https://tgkoco.github.io/2019/nhbase64/</link>
      <pubDate>Sat, 07 Sep 2019 01:49:38 +0800</pubDate>
      
      <guid>https://tgkoco.github.io/2019/nhbase64/</guid>
      <description> 下面是一个简单的base64编码实例。 在这里，三个字符组成的输入值“Ow!”是base64编码的，得到的是4个字符的base64编码值“T3ch”。它是按以下方式工作的。
(1) 字符串&amp;#34;Ow!&amp;#34;被拆分成3个8位的字节(0x4F、0x77、0x21)。 (2) 这3个字节构成了一个24为的二进制01001111 01110111 00100001。 (3) 这些为被划分为一些6位的序列010011、110111、011100、1000001. (4) 每个6位值都表示了从0～63之间的数字，对应base64字母表中的64个字符之一。得到的base64编码字符串是4个字符的字符串“T3ch”。然后就可以通过线路将这个字符串作为“安全的”8位字符传送出去，因为只用了一些移植性最好的字符(字母、数字等)。 base64填充  base64编码收到一个8位字节序列，将这个二进制序列流划分成6位的块。二进制序列有时不能正好平均地分为6位的块，在这种情况下，就在序列末尾填充零位，使二进制序列的长度成为24的倍数(6和8的最小公倍数)。
 对已填充的二进制进行编码时，任何完全填充(不包括原始数组中的位)的6位组都有特殊的第65个符号&amp;rdquo;=&amp;ldquo;表示。如果6位组是部分填充的，就将填充位设置为0.
 下面会写一个填充实例。初始输入字符串为&amp;rdquo;a:a&amp;rdquo;为3个字节(24位)。24是6和8的倍数，因此按照上面给出的例子计算。无需填充就会得到base64编码为&amp;rdquo;YTph&amp;rdquo;。
 然而，再增加一个字符，输入字符串变为&amp;rdquo;a:aa&amp;rdquo;,转换为二进制就会有32位长。而6和8的下一个公倍数为48.因此要添加16为的填充码。填充的前4位是与数据位混合在一起的。得到的6位组01xxxx，会被当作010000、十进制中的16，或者base64编码的Q来处理。剩下的两个6位组都是填充码，用=来表示。
a:a &amp;ndash; 011000 010011 101001 100001 &amp;ndash; YTph
a:aa &amp;ndash; 011000 010011 101001 100001 011000 01xxxx xxxxxx xxxxxx &amp;ndash; YTphYQ==
a:aaa &amp;ndash; 011000 010011 101001 100001 011000 010110 0001xx xxxxxx &amp;ndash; YTphYWE=
a:aaaa &amp;ndash; 011000 010011 101001 100001 011000 010110 000101 1000001 &amp;ndash; YTphYWFh
  </description>
    </item>
    
    <item>
      <title>[模板]模板样式信息</title>
      <link>https://tgkoco.github.io/2019/nh%E6%A8%A1%E6%9D%BF%E6%A0%B7%E5%BC%8F%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Fri, 06 Sep 2019 10:47:38 +0800</pubDate>
      
      <guid>https://tgkoco.github.io/2019/nh%E6%A8%A1%E6%9D%BF%E6%A0%B7%E5%BC%8F%E4%BF%A1%E6%81%AF/</guid>
      <description>&lt;p&gt;内容摘要信息&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>